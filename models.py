import torch.nn as nn

models = {
    "256": nn.Sequential(
        nn.Conv2d(3, 32, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(32, 32, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(32, 64, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(64, 64, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(64, 128, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(128, 128, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(128, 256, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(256, 256, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(256, 3, (3, 3), padding=(1, 1))
    ),
    "512": nn.Sequential(
        nn.Conv2d(3, 32, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(32, 32, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(32, 64, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(64, 64, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(64, 128, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(128, 128, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(128, 256, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(256, 256, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(256, 256, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(256, 256, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(256, 256, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(256, 256, (3, 3), padding=(1, 1)),
        nn.LeakyReLU(0.1),
        nn.Conv2d(256, 3, (3, 3), padding=(1, 1))
    ),
}
